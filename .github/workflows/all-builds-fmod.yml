name: ðŸŒˆ All Builds With Fmod Libs
on:
  push:
    branches: [ master, add-github-actions, implementing-todo-list ]
    tags:
      - "v*"
  pull_request:
    branches: "*"
  workflow_dispatch:
# Global Settings
env:
  PROJECT_FOLDER: fmod-gdnative
  TARGET: release

jobs:
  windows-compilation:
    name: Windows Compilation
    runs-on: "windows-latest"
    env:
      FMOD_EXECUTABLE: fmodstudioapi20002win-installer.exe
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons pywin32 requests
          python --version
          scons --version
      - name : Installing FMOD
        run: |
          cd ..
          New-Item -ItemType directory -Path libs; cd libs
          New-Item -ItemType directory -Path fmod; cd fmod
          python ../../${{env.PROJECT_FOLDER}}/get_fmod.py ${{secrets.FMODUSER}} ${{secrets.FMODPASS}} windows
          7z x ${{env.FMOD_EXECUTABLE}}
          mv api/ windows
          cd ../../
      # The `godot-cpp`-repository is currently cloned inside of the project folder.
      # This is a limitation of the checkout action and will be fixed in PR#388...
      # For now we'll have to copy the `godot-cpp`-repository ourselves!
      - name: Cloning godot-cpp
        uses: actions/checkout@v2
        with:
          repository: utopia-rise/godot-cpp
          path: godot-cpp
          ref: utopia-3.2
          submodules: recursive

      - name: Compilation
        run: |
          Copy-Item -Path "./godot-cpp/" -Destination "../godot-cpp/" -Recurse
          cd ../godot-cpp
          scons platform=windows bits=64 target=${{env.TARGET}} generate_bindings=yes -j4
          scons platform=windows bits=32 target=${{env.TARGET}} generate_bindings=yes -j4
          cd ../${{env.PROJECT_FOLDER}}
          scons platform=windows target=${{env.TARGET}}
          scons platform=windows target=${{env.TARGET}} bits=32
          mkdir -p bin/x86
          mkdir -p bin/x86_64
          mv bin/libGodotFmod.windows.release.32.dll bin/x86/libGodotFmod.windows.release.32.dll
          mv bin/libGodotFmod.windows.release.64.dll bin/x86_64/libGodotFmod.windows.release.64.dll
          cp ../libs/fmod/windows/core/lib/x86/fmod_vc.dll bin/x86/fmod_vc.dll
          cp ../libs/fmod/windows/studio/lib/x86/fmodstudio_vc.dll bin/x86/fmodstudio_vc.dll
          cp ../libs/fmod/windows/core/lib/x64/fmod_vc.dll bin/x86_64/fmod_vc.dll
          cp ../libs/fmod/windows/studio/lib/x64/fmodstudio_vc.dll bin/x86_64/fmodstudio_vc.dll
          cp ../libs/fmod/windows/core/lib/x86/fmod_vc.dll bin/x86/fmod.dll
          cp ../libs/fmod/windows/studio/lib/x86/fmodstudio_vc.dll bin/x86/fmodstudio.dll
          cp ../libs/fmod/windows/core/lib/x64/fmod_vc.dll bin/x86_64/fmod.dll
          cp ../libs/fmod/windows/studio/lib/x64/fmodstudio_vc.dll bin/x86_64/fmodstudio.dll
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: |
            bin
  linux-compilation:
    name: Linux Compilation
    runs-on: "ubuntu-20.04"
    env:
      FMOD_EXECUTABLE: fmodstudioapi20002linux.tar.gz
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev gcc-multilib g++-multilib libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm
      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons requests
          python --version
          scons --version
      - name : Installing FMOD
        run: |
          cd ..
          mkdir libs && cd libs
          mkdir fmod && cd fmod
          python ../../${{env.PROJECT_FOLDER}}/get_fmod.py ${{secrets.FMODUSER}} ${{secrets.FMODPASS}} linux
          tar -xvf ${{env.FMOD_EXECUTABLE}}
          mv fmodstudioapi20002linux/api linux
          cd ../../
      # The `godot-cpp`-repository is currently cloned inside of the project folder.
      # This is a limitation of the checkout action and will be fixed in PR#388...
      # For now we'll have to copy the `godot-cpp`-repository ourselves!
      - name: Cloning godot-cpp
        uses: actions/checkout@v2
        with:
          repository: utopia-rise/godot-cpp
          path: godot-cpp
          ref: utopia-3.2
          submodules: recursive

      # Linux shared libraries are humongous (>70MB) for some reason.. don't forget to strip them!
      - name: Compilation
        run: |
          cp -r godot-cpp ../godot-cpp
          cd ../godot-cpp
          scons platform=linux bits=64 target=${{env.TARGET}} generate_bindings=yes -j4
          scons platform=linux bits=32 target=${{env.TARGET}} generate_bindings=yes -j4
          cd ../${{env.PROJECT_FOLDER}}
          scons platform=linux target=${{env.TARGET}}
          scons platform=linux target=${{env.TARGET}} bits=32
          mkdir -p bin/x86
          mkdir -p bin/x86_64
          mv bin/libGodotFmod.linux.release.32.so bin/x86/libGodotFmod.linux.release.32.so
          mv bin/libGodotFmod.linux.release.64.so bin/x86_64/libGodotFmod.linux.release.64.so
          strip --strip-all bin/x86_64/libGodotFmod.linux.release.64.so
          strip --strip-all bin/x86/libGodotFmod.linux.release.32.so
          cp /home/runner/work/fmod-gdnative/libs/fmod/linux/core/lib/x86_64/libfmod.so bin/x86_64/libfmod.so
          cp /home/runner/work/fmod-gdnative/libs/fmod/linux/studio/lib/x86_64/libfmodstudio.so bin/x86_64/libfmodstudio.so
          cp /home/runner/work/fmod-gdnative/libs/fmod/linux/core/lib/x86/libfmod.so bin/x86/libfmod.so
          cp /home/runner/work/fmod-gdnative/libs/fmod/linux/studio/lib/x86/libfmodstudio.so bin/x86/libfmodstudio.so
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: |
            bin
  macos-compilation:
    name: MacOS Compilation
    runs-on: "macos-latest"
    env:
      FMOD_EXECUTABLE: fmodstudioapi20002osx.dmg
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons requests
          python --version
          scons --version
      - name : Installing FMOD
        run: |
          cd ..
          mkdir libs && cd libs
          mkdir fmod && cd fmod
          python ../../${{env.PROJECT_FOLDER}}/get_fmod.py ${{secrets.FMODUSER}} ${{secrets.FMODPASS}} osx
          hdiutil attach ${{env.FMOD_EXECUTABLE}}
          cp -r "/Volumes/FMOD Programmers API Mac/FMOD Programmers API/api" osx
          cd ../../
      # The `godot-cpp`-repository is currently cloned inside of the project folder.
      # This is a limitation of the checkout action and will be fixed in PR#388...
      # For now we'll have to copy the `godot-cpp`-repository ourselves!
      - name: Cloning godot-cpp
        uses: actions/checkout@v2
        with:
          repository: utopia-rise/godot-cpp
          path: godot-cpp
          ref: utopia-3.2
          submodules: recursive

      - name: Compilation
        run: |
          cp -r godot-cpp ../godot-cpp
          cd ../godot-cpp
          scons platform=osx bits=64 target=${{env.TARGET}} generate_bindings=yes -j4
          cd ../${{env.PROJECT_FOLDER}}
          scons platform=osx target=${{env.TARGET}}
          mkdir -p bin/x86_64
          mv bin/libGodotFmod.osx.release.64.dylib bin/x86_64/libGodotFmod.osx.release.64.dylib
          cp  ../libs/fmod/osx/core/lib/fmod.dylib bin/x86_64/fmod.dylib
          cp  ../libs/fmod/osx/studio/lib/fmodstudio.dylib bin/x86_64/fmodstudio.dylib
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: osx
          path: |
            bin

  android-compilation:
    name: Android Compilation
    runs-on: "ubuntu-20.04"
    env:
      FMOD_EXECUTABLE: fmodstudioapi20002android.tar.gz
    steps:
      - name: Checkout
        uses: actions/checkout@v2 
        with:
            submodules: recursive

      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: 8

      # Use python 3.x release (works cross platform)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons requests
          python --version
          scons --version
      - name : Installing FMOD
        run: |
          cd ..
          mkdir libs && cd libs
          mkdir fmod && cd fmod
          python ../../${{env.PROJECT_FOLDER}}/get_fmod.py ${{secrets.FMODUSER}} ${{secrets.FMODPASS}} android
          tar -xvf ${{env.FMOD_EXECUTABLE}}
          mv fmodstudioapi20002android/api android
          cd ../../
      # The `godot-cpp`-repository is currently cloned inside of the project folder.
      # This is a limitation of the checkout action and will be fixed in PR#388...
      # For now we'll have to copy the `godot-cpp`-repository ourselves!
      - name: Cloning godot-cpp
        uses: actions/checkout@v2
        with:
          repository: utopia-rise/godot-cpp
          path: godot-cpp
          ref: utopia-3.2
          submodules: recursive

      - name: Compilation
        env:
          ANDROID_NDK_ROOT: /usr/local/lib/android/sdk/ndk-bundle
        run: |
          cp -r godot-cpp ../godot-cpp
          cd ../godot-cpp
          scons platform=android bits=64 android_arch=armv7 target=${{env.TARGET}} generate_bindings=yes -j4
          scons platform=android bits=64 android_arch=arm64v8 target=${{env.TARGET}} generate_bindings=yes -j4
          scons platform=android bits=64 android_arch=x86 target=${{env.TARGET}} generate_bindings=yes -j4
          scons platform=android bits=64 android_arch=x86_64 target=${{env.TARGET}} generate_bindings=yes -j4
          cd ../${{env.PROJECT_FOLDER}}
          $ANDROID_NDK_ROOT/ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=Android.mk APP_PLATFORM=android-21 NDK_LIBS_OUT=bin/
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: android
          path: |
            bin
  ios-compilation:
    name: iOS Compilation
    runs-on: "macos-latest"
    env:
      FMOD_EXECUTABLE: fmodstudioapi20002ios.dmg
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # Use python 3.x release (works cross platform)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # You can test your matrix by printing the current Python version
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons requests
          python --version
          scons --version
      - name : Installing FMOD
        run: |
          cd ..
          mkdir libs && cd libs
          mkdir fmod && cd fmod
          python ../../${{env.PROJECT_FOLDER}}/get_fmod.py ${{secrets.FMODUSER}} ${{secrets.FMODPASS}} ios
          hdiutil attach ${{env.FMOD_EXECUTABLE}}
          cp -r "/Volumes/FMOD Programmers API iOS/FMOD Programmers API/api" ios
          cd ../../
      # The `godot-cpp`-repository is currently cloned inside of the project folder.
      # This is a limitation of the checkout action and will be fixed in PR#388...
      # For now we'll have to copy the `godot-cpp`-repository ourselves!
      - name: Cloning godot-cpp
        uses: actions/checkout@v2
        with:
          repository: utopia-rise/godot-cpp
          path: godot-cpp
          ref: utopia-3.2
          submodules: recursive

      - name: Compilation
        run: |
          cp -r "godot-cpp" "../godot-cpp"
          cd ../godot-cpp
          scons platform=ios ios_arch=arm64 bits=64 target=${{env.TARGET}} generate_bindings=yes -j4
          cd ../${{env.PROJECT_FOLDER}}
          scons platform=ios ios_arch=arm64 target=${{env.TARGET}}
          cp "../godot-cpp/bin/libgodot-cpp.ios.release.arm64.a" "bin/libgodot-cpp.ios.release.arm64.a"
          cp  ../libs/fmod/ios/core/lib/libfmod_iphoneos.a bin/libfmod_iphoneos.a
          cp  ../libs/fmod/ios/studio/lib/libfmodstudio_iphoneos.a bin/libfmodstudio_iphoneos.a
      # Unfortunately the `upload-artefact@v2`-action doesn't allow the use of . or ..
      # So we have to use the full path to the compiled godot-cpp library here.
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ios
          path: |
            bin
